task: SuggestOptimizedGitHubTopics
objective: To analyze the content of a project's README file and generate a list of
  suggested GitHub Topics, optimized for relevance, discoverability (popularity &
  SEO), and trendiness.
input_source:
  type: flexible
  description: The user can provide the README content either as a direct text paste
    or as a file attachment.
  options:
  - method: pasted_text
    data_field: readme_text_content
  - method: file_attachment
    data_field: readme_file_content_base64
    accepted_formats:
    - .md
    - .txt
processing_pipeline:
- step: 1
  name: Content Ingestion and Parsing
  action: Extract keywords, phrases, and semantic meaning from the provided README
    content. Identify all mentioned technologies, libraries, frameworks, programming
    languages, and the project's core purpose.
- step: 2
  name: Candidate Topic Generation
  action: Use the extracted entities from Step 1 as seeds to query an external knowledge
    base that mirrors GitHub's topic ecosystem and general developer search trends.
- step: 3
  name: Scoring and Ranking
  action: Evaluate each candidate topic against a multi-factor scoring model to determine
    its final value.
  scoring_criteria:
  - factor: contextual_relevance
    weight: 0.5
    description: How accurately the topic describes the project's primary function
      as detailed in the README. This is the highest priority.
  - factor: github_popularity
    weight: 0.25
    description: The usage frequency of the topic across GitHub. High-popularity topics
      increase discoverability.
  - factor: search_engine_optimization_value
    weight: 0.15
    description: The likelihood of the topic being used as a search term by developers
      looking for this type of project.
  - factor: trending_status
    weight: 0.1
    description: Whether the topic is currently part of a rising trend in technology,
      indicating high current interest.
- step: 4
  name: Final Selection and Formatting
  action: Filter the ranked list to produce a concise and actionable set of suggestions,
    removing redundancy and providing a mix of specific and broad topics.
output_specification:
  format: structured_list
  number_of_suggestions: 15
  content_schema:
    description: The final output should be a list of suggested topic objects.
    item_structure:
      topic_name:
        type: string
        example: react-hooks
      justification:
        type: string
        example: The README extensively mentions creating custom hooks and functional
          components.
      category:
        type: enum
        values:
        - High Relevance
        - High Discoverability
        - Trending
